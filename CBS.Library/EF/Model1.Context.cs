//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CBS.Library.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBSCBSEntities : DbContext
    {
        public DBSCBSEntities()
            : base("name=DBSCBSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<App> Apps { get; set; }
        public virtual DbSet<AppBillPmt> AppBillPmts { get; set; }
        public virtual DbSet<AppBureauReq> AppBureauReqs { get; set; }
        public virtual DbSet<AppDecResp> AppDecResps { get; set; }
        public virtual DbSet<AppDoc> AppDocs { get; set; }
        public virtual DbSet<AppExCC> AppExCCs { get; set; }
        public virtual DbSet<AppExFac> AppExFacs { get; set; }
        public virtual DbSet<AppExLoan> AppExLoans { get; set; }
        public virtual DbSet<AppFac> AppFacs { get; set; }
        public virtual DbSet<AppFlag> AppFlags { get; set; }
        public virtual DbSet<AppMemo> AppMemoes { get; set; }
        public virtual DbSet<AppSupp> AppSupps { get; set; }
        public virtual DbSet<AuthGroupMenu> AuthGroupMenus { get; set; }
        public virtual DbSet<AuthGroup> AuthGroups { get; set; }
        public virtual DbSet<AuthMenu> AuthMenus { get; set; }
        public virtual DbSet<AuthParam> AuthParams { get; set; }
        public virtual DbSet<AuthPwdHist> AuthPwdHists { get; set; }
        public virtual DbSet<AuthUserActivity> AuthUserActivities { get; set; }
        public virtual DbSet<AuthUserFlag> AuthUserFlags { get; set; }
        public virtual DbSet<AuthUserGroup> AuthUserGroups { get; set; }
        public virtual DbSet<AuthUserHist> AuthUserHists { get; set; }
        public virtual DbSet<AuthUser> AuthUsers { get; set; }
        public virtual DbSet<CustFin> CustFins { get; set; }
        public virtual DbSet<CustJob> CustJobs { get; set; }
        public virtual DbSet<CustPersonal> CustPersonals { get; set; }
        public virtual DbSet<CustRel> CustRels { get; set; }
        public virtual DbSet<DataImport> DataImports { get; set; }
        public virtual DbSet<DataImportDestColumn> DataImportDestColumns { get; set; }
        public virtual DbSet<DataImportDestTable> DataImportDestTables { get; set; }
        public virtual DbSet<DataImportFlatFile> DataImportFlatFiles { get; set; }
        public virtual DbSet<DataImportFlatFileColumn> DataImportFlatFileColumns { get; set; }
        public virtual DbSet<DataImportLog> DataImportLogs { get; set; }
        public virtual DbSet<DataImportLogDetail> DataImportLogDetails { get; set; }
        public virtual DbSet<EnumBureauType> EnumBureauTypes { get; set; }
        public virtual DbSet<EnumIdebFacCat> EnumIdebFacCats { get; set; }
        public virtual DbSet<FRAMEWORK_FOREIGNKEY> FRAMEWORK_FOREIGNKEY { get; set; }
        public virtual DbSet<FRAMEWORK_FORMULAFIELD> FRAMEWORK_FORMULAFIELD { get; set; }
        public virtual DbSet<FRAMEWORK_LINDEDSERVER> FRAMEWORK_LINDEDSERVER { get; set; }
        public virtual DbSet<Ideb> Idebs { get; set; }
        public virtual DbSet<IdebCorpData> IdebCorpDatas { get; set; }
        public virtual DbSet<IdebCorpGroup> IdebCorpGroups { get; set; }
        public virtual DbSet<IdebCorpSearchVar> IdebCorpSearchVars { get; set; }
        public virtual DbSet<IdebFac> IdebFacs { get; set; }
        public virtual DbSet<IdebFacBg> IdebFacBgs { get; set; }
        public virtual DbSet<IdebFacCollateral> IdebFacCollaterals { get; set; }
        public virtual DbSet<IdebFacCollect> IdebFacCollects { get; set; }
        public virtual DbSet<IdebFacCredit> IdebFacCredits { get; set; }
        public virtual DbSet<IdebFacLc> IdebFacLcs { get; set; }
        public virtual DbSet<IdebFacOther> IdebFacOthers { get; set; }
        public virtual DbSet<IdebFacPenjamin> IdebFacPenjamins { get; set; }
        public virtual DbSet<IdebFacSb> IdebFacSbs { get; set; }
        public virtual DbSet<IdebFacSummary> IdebFacSummaries { get; set; }
        public virtual DbSet<IdebIndivData> IdebIndivDatas { get; set; }
        public virtual DbSet<IdebIndivSearchVar> IdebIndivSearchVars { get; set; }
        public virtual DbSet<LIST> LISTs { get; set; }
        public virtual DbSet<ParameterSystem> ParameterSystems { get; set; }
        public virtual DbSet<ParameterSystem_AuditTrail> ParameterSystem_AuditTrail { get; set; }
        public virtual DbSet<ParameterSystem_AuditTrailDetail> ParameterSystem_AuditTrailDetail { get; set; }
        public virtual DbSet<ParameterSystem_Temporary> ParameterSystem_Temporary { get; set; }
        public virtual DbSet<ParameterSystem_TemporaryDetail> ParameterSystem_TemporaryDetail { get; set; }
        public virtual DbSet<ParameterSystemField> ParameterSystemFields { get; set; }
        public virtual DbSet<ProcGenAppId> ProcGenAppIds { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<SysModule> SysModules { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int usp_GenAppId(ObjectParameter appId, string org)
        {
            var orgParameter = org != null ?
                new ObjectParameter("Org", org) :
                new ObjectParameter("Org", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GenAppId", appId, orgParameter);
        }
    
        public virtual ObjectResult<string> usp_GetAppId(string userId, string org)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var orgParameter = org != null ?
                new ObjectParameter("Org", org) :
                new ObjectParameter("Org", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetAppId", userIdParameter, orgParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_InsUserActivity(string userId, string tokenId, string actDesc, Nullable<int> actLevel, string hostIP, string pageName, string pageURL)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("tokenId", tokenId) :
                new ObjectParameter("tokenId", typeof(string));
    
            var actDescParameter = actDesc != null ?
                new ObjectParameter("actDesc", actDesc) :
                new ObjectParameter("actDesc", typeof(string));
    
            var actLevelParameter = actLevel.HasValue ?
                new ObjectParameter("actLevel", actLevel) :
                new ObjectParameter("actLevel", typeof(int));
    
            var hostIPParameter = hostIP != null ?
                new ObjectParameter("hostIP", hostIP) :
                new ObjectParameter("hostIP", typeof(string));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var pageURLParameter = pageURL != null ?
                new ObjectParameter("pageURL", pageURL) :
                new ObjectParameter("pageURL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_InsUserActivity", userIdParameter, tokenIdParameter, actDescParameter, actLevelParameter, hostIPParameter, pageNameParameter, pageURLParameter);
        }
    
        public virtual ObjectResult<usp_ViewImpFFSetting_Result> usp_ViewImpFFSetting(Nullable<int> importId)
        {
            var importIdParameter = importId.HasValue ?
                new ObjectParameter("importId", importId) :
                new ObjectParameter("importId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ViewImpFFSetting_Result>("usp_ViewImpFFSetting", importIdParameter);
        }
    
        public virtual ObjectResult<usp_ViewIWIDReqResp_Result> usp_ViewIWIDReqResp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ViewIWIDReqResp_Result>("usp_ViewIWIDReqResp");
        }
    
        public virtual ObjectResult<usp_ViewSPSResponse_Result> usp_ViewSPSResponse()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ViewSPSResponse_Result>("usp_ViewSPSResponse");
        }
    }
}
